 [M_interp_3D, dp_interp] = hang_from_Elevation(srModel, dws_modelSpace, dws_lwBound, incrmnt)

% function that hangs the entire velocity model from topography

    upEnd = round(max(srModel.elevation(:))) + 2;
    lwEnd = round(min(srModel.zg) + min(min(srModel.elevation))) - 2;
    
    dp_interp = flip(lwEnd:incrmnt:upEnd);
        
    M_interp_3D = [];
    for i = 1:length(srModel.yg) % looping through yLine
     
        M_2D   = squeeze(srModel.P.u(:,i,:));
        E_1D   = squeeze(srModel.elevation(:,i));
        dws_2D = squeeze(dws_modelSpace(:,i,:));
        
        M_interp_2D = [];
        for j = 1:length(srModel.xg) % looping through xLine
            
            dws_1D = squeeze(dws_2D(j,:));
            M_1D   = squeeze(M_2D(j,:));
            E_P    = E_1D(j);
    
            M_1D = 1./M_1D;
    
            zg_elv  = srModel.zg + E_P;
    
            if zg_elv(1)<0 % for 1-D profiles in the sea 
    
                zg_elv_cat = vertcat((dp_interp(1)+.01), ... % top of depth array
                                    0.0001, ... % just before the sea surface
                                    0, ... % At the sea surface
                                      (zg_elv(1)+0.01), ... % 1st velocity point depth
                                        (zg_elv)); % all the velocity depth points
    
                M_1D_cat   = horzcat(0, 0, 0, 0, M_1D);
    
            else % for 1-D profiles over the continent
                
                zg_elv_cat = vertcat((dp_interp(1)+.01), ... % top of depth array
                                    zg_elv(1)+1, ...
                                    zg_elv(1)+0.01, ... % just before the ground
                                        zg_elv); % all the velocity depth points
    
                M_1D_cat   = horzcat(0, 0, 0, M_1D);
            end
                
            M_interp = interp1(zg_elv_cat, M_1D_cat', dp_interp');
    
            M_interp(find(dws_1D<dws_lwBound)) = nan;
    
            M_interp_2D(j,:) = M_interp;
        end
        
        M_interp_3D(:,i,:) = M_interp_2D;
    
    end
    

end